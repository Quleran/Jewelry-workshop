from database import Database
from datetime import datetime
from abc import ABC, abstractmethod
from typing import List, Dict, Any, Optional


# ==============================
# PATTERN 1: SINGLETON –¥–ª—è Database
# ==============================
class DatabaseSingleton:
    """–ü–∞—Ç—Ç–µ—Ä–Ω –û–¥–∏–Ω–æ—á–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance._db = Database()
        return cls._instance

    def get_db(self):
        return self._db

    def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ —ç–∫–∑–µ–º–ø–ª—è—Ä Database"""
        return self._db.create_tables()


# ==============================
# PATTERN 2: FACTORY METHOD –¥–ª—è –º–æ–¥–µ–ª–µ–π
# ==============================
class ModelFactory(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π"""

    @abstractmethod
    def create_model(self, **kwargs):
        pass

    @classmethod
    def create_from_db_row(cls, data):
        """–§–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ë–î"""
        return cls().create_model(**data)


class ClientFactory(ModelFactory):
    def create_model(self, **kwargs):
        return Client(**kwargs)


class MasterFactory(ModelFactory):
    def create_model(self, **kwargs):
        return Master(**kwargs)


class ProductFactory(ModelFactory):
    def create_model(self, **kwargs):
        return Product(**kwargs)


class OrderFactory(ModelFactory):
    def create_model(self, **kwargs):
        return Order(**kwargs)


class OrderItemFactory(ModelFactory):
    def create_model(self, **kwargs):
        return OrderItem(**kwargs)


class WorkOrderFactory(ModelFactory):
    def create_model(self, **kwargs):
        return WorkOrder(**kwargs)


# ==============================
# PATTERN 3: BUILDER –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
# ==============================
class OrderBuilder:
    """–°—Ç—Ä–æ–∏—Ç–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""

    def __init__(self):
        self.reset()

    def reset(self):
        self.order = None
        self.client = None
        self.order_items = []
        self.work_order = None
        return self

    def set_client(self, name, surname, phone_number, email=None):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        self.client = Client(
            name=name,
            surname=surname,
            phone_number=phone_number,
            email=email
        )
        return self

    def set_existing_client(self, client_id):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        self.client = Client.get_by_id(client_id)
        if not self.client:
            raise ValueError(f"–ö–ª–∏–µ–Ω—Ç —Å ID {client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return self

    def add_product(self, product_type, material, sample, inform=None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∑–∞–∫–∞–∑"""
        # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
        product = Product.get_by_params(product_type, material, sample)
        if not product:
            product = Product(
                type=product_type,
                material=material,
                sample=sample
            )
            product.save()

        # –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∑–∞–∫–∞–∑–∞
        order_item = OrderItem(
            product_id=product.id,
            inform=inform
        )
        self.order_items.append(order_item)
        return self

    def add_existing_product(self, product_id, inform=None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∑–∞–∫–∞–∑"""
        product = Product.get_by_id(product_id)
        if not product:
            raise ValueError(f"–ü—Ä–æ–¥—É–∫—Ç —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        order_item = OrderItem(
            product_id=product.id,
            inform=inform
        )
        self.order_items.append(order_item)
        return self

    def assign_master(self, master_id=None):
        """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–ª–∏ –≤—Ä—É—á–Ω—É—é)"""
        if master_id:
            master = Master.get_by_id(master_id)
            if not master:
                raise ValueError(f"–ú–∞—Å—Ç–µ—Ä —Å ID {master_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
            available_masters = Master.get_available_masters()
            if not available_masters:
                raise ValueError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤")
            master = available_masters[0]

        self.work_order = WorkOrder(master_id=master.id)
        return self

    def set_status(self, status):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        if not self.order:
            self.order = Order()
        self.order.status = status
        return self

    def build(self):
        """–°–±–æ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        if not self.client:
            raise ValueError("–ö–ª–∏–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω")

        if not self.order_items:
            raise ValueError("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å–ª–∏ –æ–Ω –Ω–æ–≤—ã–π
        if not self.client.id:
            existing_client = Client.get_by_phone(self.client.phone_number)
            if existing_client:
                self.client = existing_client
            else:
                self.client.save()

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        if not self.order:
            self.order = Order(client_id=self.client.id)
        else:
            self.order.client_id = self.client.id

        self.order.save()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        for item in self.order_items:
            item.order_id = self.order.id
            item.save()

        # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–µ–µ –∑–∞–¥–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –º–∞—Å—Ç–µ—Ä
        if self.work_order:
            self.work_order.order_id = self.order.id
            self.work_order.save()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤ –º–∞—Å—Ç–µ—Ä–∞
            master = Master.get_by_id(self.work_order.master_id)
            if master:
                master.current_orders += 1
                master.update_availability()

        result = {
            'order': self.order,
            'client': self.client,
            'items': self.order_items,
            'work_order': self.work_order
        }

        return result


# ==============================
# PATTERN 4: FACADE –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
# ==============================
class OrderManagementFacade:
    """–§–∞—Å–∞–¥ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∑–∞–∫–∞–∑–æ–≤"""

    def __init__(self, jewelry_system):
        self.system = jewelry_system
        self._logger = OrderLogger()

    def create_simple_order(self, client_name, client_surname, client_phone,
                            product_type, material, sample, client_email=None, product_info=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é"""
        print(f"\nüéØ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è {client_name} {client_surname}")

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å —á–µ—Ä–µ–∑ —Ñ–∞—Å–∞–¥
            builder = self.system.get_order_builder()

            result = (builder
                      .set_client(
                name=client_name,
                surname=client_surname,
                phone_number=client_phone,
                email=client_email
            )
                      .add_product(
                product_type=product_type,
                material=material,
                sample=sample,
                inform=product_info
            )
                      .assign_master()  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞
                      .build())

            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
            self._logger.log(f"–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ #{result['order'].id} –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_phone}")

            print(f"‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! ID: {result['order'].id}")
            return result

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}"
            self._logger.log(error_msg, level="ERROR")
            print(f"‚ùå {error_msg}")
            return None

    def create_advanced_order(self, client_data, products_data, master_id=None, status='new'):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏"""
        print(f"\nüéØ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞")

        try:
            builder = self.system.get_order_builder()

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
            if 'id' in client_data:
                builder.set_existing_client(client_data['id'])
            else:
                builder.set_client(**client_data)

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            for product in products_data:
                if 'id' in product:
                    builder.add_existing_product(**product)
                else:
                    builder.add_product(**product)

            # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞
            if master_id:
                builder.assign_master(master_id=master_id)
            else:
                builder.assign_master()

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            builder.set_status(status)

            result = builder.build()

            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
            order_info = f"–°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∑–∞–∫–∞–∑ #{result['order'].id}, —Å—Ç–∞—Ç—É—Å: {status}"
            self._logger.log(order_info)

            print(f"‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! ID: {result['order'].id}, –°—Ç–∞—Ç—É—Å: {status}")
            return result

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞: {e}"
            self._logger.log(error_msg, level="ERROR")
            print(f"‚ùå {error_msg}")
            return None

    def get_order_summary(self, order_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ"""
        print(f"\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –∑–∞–∫–∞–∑—É #{order_id}")

        order = Order.get_by_id(order_id)
        if not order:
            print("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None

        client = order.get_client()
        items = order.get_order_items()
        work_order = order.get_work_order()
        master = work_order.get_master() if work_order else None

        summary = {
            'order': order,
            'client': client,
            'items': items,
            'master': master,
            'work_order': work_order,
            'total_products': len(items)
        }

        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        print(f"üì¶ –ó–∞–∫–∞–∑ #{order.id}")
        print(f"üë§ –ö–ª–∏–µ–Ω—Ç: {client.name} {client.surname}")
        print(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {client.phone_number}")
        print(f"üîÑ –°—Ç–∞—Ç—É—Å: {order.status}")
        print(f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master.name if master else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}")
        print(f"üìã –¢–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ: {len(items)}")

        return summary

    def change_order_status(self, order_id, new_status):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        print(f"\nüîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{order_id} –Ω–∞ '{new_status}'")

        order = Order.get_by_id(order_id)
        if not order:
            print("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        old_status = order.status
        order.status = new_status
        success = order.save()

        if success:
            self._logger.log(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω: {old_status} -> {new_status}")
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞")

        return success


class OrderLogger:
    """–ü—Ä–æ—Å—Ç–æ–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ñ–∞—Å–∞–¥–∞"""

    def log(self, message, level="INFO"):
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] {level}: {message}"
        print(f"üìù {log_entry}")


# ==============================
# PATTERN 5: DECORATOR –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥ –∑–∞–∫–∞–∑–∞
# ==============================
class OrderDecorator(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞–∫–∞–∑–æ–≤"""

    def __init__(self, order_component):
        self._order_component = order_component

    @abstractmethod
    def get_description(self):
        pass

    @abstractmethod
    def get_total_cost(self):
        pass

    @abstractmethod
    def get_additional_info(self):
        pass


class BaseOrderComponent:
    """–ë–∞–∑–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–∫–∞–∑–∞"""

    def __init__(self, order, base_cost=0):
        self.order = order
        self._base_cost = base_cost

    def get_description(self):
        return "–ë–∞–∑–æ–≤—ã–π –∑–∞–∫–∞–∑"

    def get_total_cost(self):
        return self._base_cost

    def get_additional_info(self):
        return {}


class UrgentOrderDecorator(OrderDecorator):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""

    def __init__(self, order_component, urgency_level="standard"):
        super().__init__(order_component)
        self.urgency_level = urgency_level
        self._urgency_costs = {
            "standard": 500,
            "express": 1000,
            "super_express": 2000
        }

    def get_description(self):
        base_desc = self._order_component.get_description()
        level_names = {
            "standard": "–°—Ä–æ—á–Ω—ã–π",
            "express": "–≠–∫—Å–ø—Ä–µ—Å—Å",
            "super_express": "–°—É–ø–µ—Ä-—ç–∫—Å–ø—Ä–µ—Å—Å"
        }
        return f"{base_desc} + {level_names[self.urgency_level]}"

    def get_total_cost(self):
        base_cost = self._order_component.get_total_cost()
        urgency_cost = self._urgency_costs.get(self.urgency_level, 0)
        return base_cost + urgency_cost

    def get_additional_info(self):
        base_info = self._order_component.get_additional_info()
        base_info.update({
            "urgent": True,
            "urgency_level": self.urgency_level,
            "urgency_cost": self._urgency_costs.get(self.urgency_level, 0)
        })
        return base_info


class InsuranceDecorator(OrderDecorator):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""

    def __init__(self, order_component, insurance_amount=10000):
        super().__init__(order_component)
        self.insurance_amount = insurance_amount
        self._insurance_cost = insurance_amount * 0.01  # 1% –æ—Ç —Å—Ç—Ä–∞—Ö–æ–≤–æ–π —Å—É–º–º—ã

    def get_description(self):
        base_desc = self._order_component.get_description()
        return f"{base_desc} + –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ ({self.insurance_amount} —Ä—É–±.)"

    def get_total_cost(self):
        base_cost = self._order_component.get_total_cost()
        return base_cost + self._insurance_cost

    def get_additional_info(self):
        base_info = self._order_component.get_additional_info()
        base_info.update({
            "insured": True,
            "insurance_amount": self.insurance_amount,
            "insurance_cost": self._insurance_cost
        })
        return base_info


class GiftPackageDecorator(OrderDecorator):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–∏"""

    def __init__(self, order_component, package_type="standard"):
        super().__init__(order_component)
        self.package_type = package_type
        self._package_costs = {
            "standard": 300,
            "premium": 800,
            "luxury": 1500
        }

    def get_description(self):
        base_desc = self._order_component.get_description()
        type_names = {
            "standard": "–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞",
            "premium": "–ü—Ä–µ–º–∏—É–º —É–ø–∞–∫–æ–≤–∫–∞",
            "luxury": "–≠–ª–∏—Ç–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞"
        }
        return f"{base_desc} + {type_names[self.package_type]}"

    def get_total_cost(self):
        base_cost = self._order_component.get_total_cost()
        package_cost = self._package_costs.get(self.package_type, 0)
        return base_cost + package_cost

    def get_additional_info(self):
        base_info = self._order_component.get_additional_info()
        base_info.update({
            "gift_package": True,
            "package_type": self.package_type,
            "package_cost": self._package_costs.get(self.package_type, 0)
        })
        return base_info


class OrderEnhancementService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –∫ –∑–∞–∫–∞–∑–∞–º"""

    @staticmethod
    def create_enhanced_order(base_order, enhancements):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤

        Args:
            base_order: –ë–∞–∑–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞
            enhancements: –°–ª–æ–≤–∞—Ä—å —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
                –ü—Ä–∏–º–µ—Ä: {
                    'urgent': 'express',
                    'insurance': 15000,
                    'gift_package': 'premium'
                }
        """
        base_cost = 0  # –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞–∫–∞–∑–∞

        order_component = BaseOrderComponent(base_order, base_cost)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π
        if 'urgent' in enhancements:
            order_component = UrgentOrderDecorator(order_component, enhancements['urgent'])

        if 'insurance' in enhancements:
            order_component = InsuranceDecorator(order_component, enhancements['insurance'])

        if 'gift_package' in enhancements:
            order_component = GiftPackageDecorator(order_component, enhancements['gift_package'])

        return order_component


# ==============================
# PATTERN 6: ADAPTER –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
# ==============================
class NotificationSender(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Ü–µ–ª–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)"""

    @abstractmethod
    def send(self, recipient, message, subject=None):
        pass

    @abstractmethod
    def get_status(self, message_id):
        pass

    @abstractmethod
    def get_sender_type(self):
        pass


# –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º–∏
class SMTPEmailService:
    """–í–Ω–µ—à–Ω–∏–π –∫–ª–∞—Å—Å Email —Å–µ—Ä–≤–∏—Å–∞ —Å –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""

    def send_email(self, to_address, from_address, email_subject, body, cc_list=None, bcc_list=None):
        """SMTP —Å–µ—Ä–≤–∏—Å —Ç—Ä–µ–±—É–µ—Ç –º–Ω–æ–≥–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        print(f"SMTP: –û—Ç–ø—Ä–∞–≤–∫–∞ email –Ω–∞ {to_address}")
        # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
        return {
            "message_id": f"email_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            "status": "delivered",
            "service": "smtp",
            "recipient": to_address
        }

    def check_email_status(self, message_id):
        """SMTP –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        return {
            "message_id": message_id,
            "status": "delivered",
            "opened": True,
            "clicks": 0
        }


class TwilioSMSService:
    """–í–Ω–µ—à–Ω–∏–π –∫–ª–∞—Å—Å SMS —Å–µ—Ä–≤–∏—Å–∞ (Twilio-like API)"""

    def send_sms_message(self, phone_number, text_content, from_number=None, media_url=None):
        """Twilio —Ä–∞–±–æ—Ç–∞–µ—Ç —Å phone numbers –∏ –∏–º–µ–µ—Ç –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
        print(f"Twilio: –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –Ω–∞ {phone_number}")
        return {
            "sid": f"SM{datetime.now().strftime('%Y%m%d%H%M%S')}",
            "status": "sent",
            "to": phone_number,
            "body": text_content
        }

    def get_message_status(self, message_sid):
        """Twilio –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        return {
            "sid": message_sid,
            "status": "delivered",
            "error_code": None
        }


class TelegramBotAPI:
    """–í–Ω–µ—à–Ω–∏–π –∫–ª–∞—Å—Å Telegram Bot API"""

    def send_telegram_message(self, chat_id, text, parse_mode=None, reply_markup=None):
        """Telegram Bot API —Ä–∞–±–æ—Ç–∞–µ—Ç —Å chat_id –∏ –∏–º–µ–µ—Ç —Å–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
        print(f"Telegram: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ chat {chat_id}")
        return {
            "message_id": datetime.now().timestamp(),
            "chat": {"id": chat_id},
            "text": text,
            "date": datetime.now().timestamp()
        }

    def get_chat_member(self, chat_id, user_id):
        """Telegram –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        return {
            "user": {
                "id": user_id,
                "first_name": "User",
                "username": "username"
            },
            "status": "member"
        }


# –ê–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –∫ –µ–¥–∏–Ω–æ–º—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É
class EmailNotificationAdapter(NotificationSender):
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    def __init__(self, email_service):
        self.email_service = email_service
        self.default_from = "jewelry-shop@almaz.ru"

    def send(self, recipient, message, subject=None):
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è SMTP —Å–µ—Ä–≤–∏—Å–∞
        email_subject = subject or "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —é–≤–µ–ª–∏—Ä–Ω–æ–π –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π"

        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ SMTP —Å–µ—Ä–≤–∏—Å–∞ —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        result = self.email_service.send_email(
            to_address=recipient,
            from_address=self.default_from,
            email_subject=email_subject,
            body=message
        )

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫ –Ω–∞—à–µ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        return {
            "message_id": result["message_id"],
            "status": "success" if result["status"] == "delivered" else "failed",
            "recipient": recipient,
            "service": "email"
        }

    def get_status(self, message_id):
        result = self.email_service.check_email_status(message_id)

        return {
            "message_id": message_id,
            "status": result["status"],
            "details": {
                "opened": result.get("opened", False),
                "clicks": result.get("clicks", 0)
            },
            "service": "email"
        }

    def get_sender_type(self):
        return "email"


class SMSNotificationAdapter(NotificationSender):
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    def __init__(self, sms_service):
        self.sms_service = sms_service
        self.default_from = "+79990001122"  # –ù–∞—à –Ω–æ–º–µ—Ä Twilio

    def send(self, recipient, message, subject=None):
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Twilio API
        # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_number = recipient.replace('+', '').replace(' ', '').replace('-', '')

        # –î–æ–±–∞–≤–ª—è–µ–º subject –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        full_message = message
        if subject:
            full_message = f"{subject}: {message}"

        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ Twilio —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        result = self.sms_service.send_sms_message(
            phone_number=phone_number,
            text_content=full_message,
            from_number=self.default_from
        )

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫ –Ω–∞—à–µ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        return {
            "message_id": result["sid"],
            "status": "success" if result["status"] == "sent" else "failed",
            "recipient": recipient,
            "service": "sms"
        }

    def get_status(self, message_id):
        result = self.sms_service.get_message_status(message_id)

        return {
            "message_id": message_id,
            "status": result["status"],
            "details": {
                "error_code": result.get("error_code")
            },
            "service": "sms"
        }

    def get_sender_type(self):
        return "sms"


class TelegramNotificationAdapter(NotificationSender):
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    def __init__(self, telegram_bot):
        self.telegram_bot = telegram_bot

    def send(self, recipient, message, subject=None):
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Telegram API
        # recipient –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å chat_id –¥–ª—è Telegram
        try:
            chat_id = int(recipient)
        except ValueError:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω username, –ø–æ–ª—É—á–∞–µ–º chat_id (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ)
            chat_id = self._get_chat_id_by_username(recipient)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        full_message = message
        if subject:
            full_message = f"**{subject}**\n\n{message}"

        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ Telegram Bot API
        result = self.telegram_bot.send_telegram_message(
            chat_id=chat_id,
            text=full_message,
            parse_mode="Markdown"
        )

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫ –Ω–∞—à–µ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        return {
            "message_id": str(result["message_id"]),
            "status": "success",
            "recipient": recipient,
            "service": "telegram"
        }

    def get_status(self, message_id):
        # –í Telegram —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
        return {
            "message_id": message_id,
            "status": "delivered",
            "service": "telegram"
        }

    def get_sender_type(self):
        return "telegram"

    def _get_chat_id_by_username(self, username):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat_id –ø–æ username"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ Telegram API
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π ID
        return 123456789


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä—ã"""

    def __init__(self):
        self.adapters = {
            'email': EmailNotificationAdapter(SMTPEmailService()),
            'sms': SMSNotificationAdapter(TwilioSMSService()),
            'telegram': TelegramNotificationAdapter(TelegramBotAPI())
        }

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
        self.notification_rules = {
            'order_created': ['email', 'sms'],
            'order_ready': ['sms', 'telegram'],
            'master_assigned': ['email'],
            'status_changed': ['email', 'sms'],
            'urgent': ['sms', 'telegram']
        }

    def send_notification(self, recipient, message, notification_type='info', channels=None, subject=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã"""
        print(f"\nüîî –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∏–ø–∞ '{notification_type}'")
        print(f"üì® –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient}")
        print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        if channels is None:
            channels = self.notification_rules.get(notification_type, ['email'])

        results = []
        for channel in channels:
            if channel in self.adapters:
                try:
                    adapter = self.adapters[channel]
                    result = adapter.send(recipient, message, subject)
                    results.append(result)

                    status_icon = "‚úÖ" if result['status'] == 'success' else "‚ùå"
                    print(f"   {status_icon} {channel.upper()}: {result['status']}")

                except Exception as e:
                    error_result = {
                        'service': channel,
                        'status': 'error',
                        'error': str(e)
                    }
                    results.append(error_result)
                    print(f"   ‚ùå {channel.upper()}: –æ—à–∏–±–∫–∞ - {e}")
            else:
                print(f"   ‚ö†Ô∏è  –ö–∞–Ω–∞–ª '{channel}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")

        return results

    def send_order_created_notification(self, order, client):
        """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞"""
        message = f"""
        üéâ –í–∞—à –∑–∞–∫–∞–∑ #{order.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!

        üì¶ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:
        ‚Ä¢ –ù–æ–º–µ—Ä: #{order.id}
        ‚Ä¢ –î–∞—Ç–∞: {order.data}
        ‚Ä¢ –°—Ç–∞—Ç—É—Å: {order.status}

        –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.
        –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à—É –º–∞—Å—Ç–µ—Ä—Å–∫—É—é! ‚ú®
        """

        subject = f"–ó–∞–∫–∞–∑ #{order.id} —Å–æ–∑–¥–∞–Ω"

        return self.send_notification(
            recipient=client.phone_number,  # –î–ª—è SMS
            message=message,
            notification_type='order_created',
            subject=subject
        )

    def send_master_assigned_notification(self, order, master, client):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞"""
        client_message = f"""
        üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –≤–∞—à –∑–∞–∫–∞–∑ #{order.id}

        –í–∞—à–∏–º –∑–∞–∫–∞–∑–æ–º –±—É–¥–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å—Å—è:
        ‚Ä¢ –ú–∞—Å—Ç–µ—Ä: {master.surname} {master.name} {master.patronymic or ''}
        ‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {master.phone_number}

        –ú—ã –ø—Ä–∏–ª–æ–∂–∏–º –≤—Å–µ —É—Å–∏–ª–∏—è –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã!
        """

        master_message = f"""
        üìã –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}

        –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:
        ‚Ä¢ –ö–ª–∏–µ–Ω—Ç: {client.name} {client.surname}
        ‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {client.phone_number}
        ‚Ä¢ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {order.data}

        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.
        """

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        client_results = self.send_notification(
            recipient=client.phone_number,
            message=client_message,
            notification_type='master_assigned',
            subject=f"–ú–∞—Å—Ç–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order.id}"
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É
        master_results = self.send_notification(
            recipient=master.phone_number,
            message=master_message,
            notification_type='master_assigned',
            subject=f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}"
        )

        return {
            'client': client_results,
            'master': master_results
        }

    def send_order_ready_notification(self, order, client):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞"""
        message = f"""
        ‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order.id} –≥–æ—Ç–æ–≤!

        –ó–∞–∫–∞–∑ –æ–∂–∏–¥–∞–µ—Ç –≤–∞—Å –≤ –Ω–∞—à–µ–π –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π.
        –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: –ø–Ω-–ø—Ç —Å 10:00 –¥–æ 19:00

        –ü—Ä–∏ —Å–µ–±–µ –∏–º–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–∏–π –ª–∏—á–Ω–æ—Å—Ç—å.
        """

        return self.send_notification(
            recipient=client.phone_number,
            message=message,
            notification_type='order_ready',
            subject=f"–ó–∞–∫–∞–∑ #{order.id} –≥–æ—Ç–æ–≤!"
        )

    def get_adapter_status(self, service):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞"""
        if service in self.adapters:
            adapter = self.adapters[service]
            return {
                'service': service,
                'type': adapter.get_sender_type(),
                'status': 'available'
            }
        return {'service': service, 'status': 'not_available'}


# ==============================
# –ë–ê–ó–û–í–´–ï –ö–õ–ê–°–°–´ –ú–û–î–ï–õ–ï–ô
# ==============================
class BaseModel:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""

    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Singleton –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
        self.db = DatabaseSingleton().get_db()

    def save(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        raise NotImplementedError("–ú–µ—Ç–æ–¥ save –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –¥–æ—á–µ—Ä–Ω–µ–º –∫–ª–∞—Å—Å–µ")

    @classmethod
    def get_by_id(cls, id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø–æ ID"""
        raise NotImplementedError("–ú–µ—Ç–æ–¥ get_by_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –¥–æ—á–µ—Ä–Ω–µ–º –∫–ª–∞—Å—Å–µ")

    @classmethod
    def get_all(cls):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤"""
        raise NotImplementedError("–ú–µ—Ç–æ–¥ get_all –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –¥–æ—á–µ—Ä–Ω–µ–º –∫–ª–∞—Å—Å–µ")


class Client(BaseModel):
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã Client"""

    def __init__(self, name=None, surname=None, phone_number=None, email=None, id=None):
        super().__init__()
        self.id = id
        self.name = name
        self.surname = surname
        self.phone_number = phone_number
        self.email = email

    def save(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        if self.id:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            query = """
            UPDATE client 
            SET name = %s, surname = %s, phone_number = %s, email = %s
            WHERE id = %s
            """
            params = (self.name, self.surname, self.phone_number, self.email, self.id)
            result = self.db.execute_query(query, params)
            return result is not False
        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            query = """
            INSERT INTO client (name, surname, phone_number, email) 
            VALUES (%s, %s, %s, %s) RETURNING id
            """
            params = (self.name, self.surname, self.phone_number, self.email)
            result = self.db.execute_query(query, params, fetch=True)
            if result:
                self.id = result[0]['id']
                return True
            return False

    @classmethod
    def get_by_id(cls, id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Factory"""
        query = "SELECT * FROM client WHERE id = %s"
        db = DatabaseSingleton().get_db()
        result = db.execute_query(query, (id,), fetch=True)
        if result:
            return ClientFactory.create_from_db_row(result[0])
        return None

    @classmethod
    def get_by_phone(cls, phone_number):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Factory"""
        query = "SELECT * FROM client WHERE phone_number = %s"
        db = DatabaseSingleton().get_db()
        result = db.execute_query(query, (phone_number,), fetch=True)
        if result:
            return ClientFactory.create_from_db_row(result[0])
        return None

    @classmethod
    def get_all(cls):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Factory"""
        query = "SELECT * FROM client ORDER BY id"
        db = DatabaseSingleton().get_db()
        result = db.execute_query(query, fetch=True)
        return [ClientFactory.create_from_db_row(data) for data in result]

    @classmethod
    def create_factory(cls):
        """–§–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        return ClientFactory()

    def __str__(self):
        return f"Client(id={self.id}, name={self.name} {self.surname}, phone={self.phone_number})"

    def __repr__(self):
        return self.__str__()


class Master(BaseModel):
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã Master"""

    def __init__(self, name=None, surname=None, patronymic=None, phone_number=None, email=None,
                 is_available=True, current_orders=0, id=None):
        super().__init__()
        self.id = id
        self.name = name
        self.surname = surname
        self.patronymic = patronymic
        self.phone_number = phone_number
        self.email = email
        self.is_available = is_available
        self.current_orders = current_orders

    def save(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        if self.id:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
            query = """
            UPDATE master 
            SET name = %s, surname = %s, patronymic = %s, phone_number = %s, 
                email = %s, is_available = %s, current_orders = %s
            WHERE id = %s
            """
            params = (self.name, self.surname, self.patronymic, self.phone_number,
                      self.email, self.is_available, self.current_orders, self.id)
            result = self.db.execute_query(query, params)
            return result is not False
        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
            query = """
            INSERT INTO master (name, surname, patronymic, phone_number, email, is_available, current_orders) 
            VALUES (%s, %s, %s, %s, %s, %s, %s) RETURNING id
            """
            params = (self.name, self.surname, self.patronymic, self.phone_number,
                      self.email, self.is_available, self.current_orders)
            result = self.db.execute_query(query, params, fetch=True)
            if result:
                self.id = result[0]['id']
                return True
            return False

    @classmethod
    def get_by_id(cls, id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –ø–æ ID —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Factory"""
        query = "SELECT * FROM master WHERE id = %s"
        db = DatabaseSingleton().get_db()
        result = db.execute_query(query, (id,), fetch=True)
        if result:
            return MasterFactory.create_from_db_row(result[0])
        return None

    @classmethod
    def get_available_masters(cls):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Factory"""
        query = "SELECT * FROM master WHERE is_available = TRUE ORDER BY current_orders"
        db = DatabaseSingleton().get_db()
        result = db.execute_query(query, fetch=True)
        return [MasterFactory.create_from_db_row(data) for data in result]

    @classmethod
    def get_all(cls):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Factory"""
        query = "SELECT * FROM master ORDER BY id"
        db = DatabaseSingleton().get_db()
        result = db.execute_query(query, fetch=True)
        return [MasterFactory.create_from_db_row(data) for data in result]

    def update_availability(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–∞—Å—Ç–µ—Ä–∞"""
        self.is_available = self.current_orders < 3
        return self.save()

    @classmethod
    def create_factory(cls):
        """–§–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞"""
        return MasterFactory()

    def __str__(self):
        status = "‚úÖ –°–≤–æ–±–æ–¥–µ–Ω" if self.is_available else "‚ö†Ô∏è –ó–∞–Ω—è—Ç"
        return f"Master(id={self.id}, name={self.surname} {self.name} {self.patronymic or ''}, orders={self.current_orders}, {status})"

    def __repr__(self):
        return self.__str__()


class Product(BaseModel):
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã Product"""

    def __init__(self, type=None, material=None, sample=None, id=None):
        super().__init__()
        self.id = id
        self.type = type
        self.material = material
        self.sample = sample

    def save(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        if self.id:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
            query = """
            UPDATE product 
            SET type = %s, material = %s, sample = %s
            WHERE id = %s
            """
            params = (self.type, self.material, self.sample, self.id)
            result = self.db.execute_query(query, params)
            return result is not False
        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
            query = """
            INSERT INTO product (type, material, sample) 
            VALUES (%s, %s, %s) RETURNING id
            """
            params = (self.type, self.material, self.sample)
            result = self.db.execute_query(query, params, fetch=True)
            if result:
                self.id = result[0]['id']
                return True
            return False

    @classmethod
    def get_by_id(cls, id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Factory"""
        query = "SELECT * FROM product WHERE id = %s"
        db = DatabaseSingleton().get_db()
        result = db.execute_query(query, (id,), fetch=True)
        if result:
            return ProductFactory.create_from_db_row(result[0])
        return None

    @classmethod
    def get_by_params(cls, type, material, sample):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
        query = "SELECT * FROM product WHERE type = %s AND material = %s AND sample = %s"
        db = DatabaseSingleton().get_db()
        result = db.execute_query(query, (type, material, sample), fetch=True)
        if result:
            return ProductFactory.create_from_db_row(result[0])
        return None

    @classmethod
    def get_all(cls):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Factory"""
        query = "SELECT * FROM product ORDER BY id"
        db = DatabaseSingleton().get_db()
        result = db.execute_query(query, fetch=True)
        return [ProductFactory.create_from_db_row(data) for data in result]

    @classmethod
    def create_factory(cls):
        """–§–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
        return ProductFactory()

    def __str__(self):
        return f"Product(id={self.id}, type={self.type}, material={self.material}, sample={self.sample})"

    def __repr__(self):
        return self.__str__()


class Order(BaseModel):
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã Order"""

    def __init__(self, client_id=None, data=None, status='new', id=None):
        super().__init__()
        self.id = id
        self.client_id = client_id
        self.data = data or datetime.now().date()
        self.status = status

    def save(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        if self.id:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
            query = """
            UPDATE order_table 
            SET client_id = %s, data = %s, status = %s
            WHERE id = %s
            """
            params = (self.client_id, self.data, self.status, self.id)
            result = self.db.execute_query(query, params)
            return result is not False
        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
            query = """
            INSERT INTO order_table (client_id, data, status) 
            VALUES (%s, %s, %s) RETURNING id
            """
            params = (self.client_id, self.data, self.status)
            result = self.db.execute_query(query, params, fetch=True)
            if result:
                self.id = result[0]['id']
                return True
            return False

    @classmethod
    def get_by_id(cls, id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ ID —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Factory"""
        query = "SELECT * FROM order_table WHERE id = %s"
        db = DatabaseSingleton().get_db()
        result = db.execute_query(query, (id,), fetch=True)
        if result:
            return OrderFactory.create_from_db_row(result[0])
        return None

    @classmethod
    def get_by_status(cls, status):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Factory"""
        query = "SELECT * FROM order_table WHERE status = %s ORDER BY id"
        db = DatabaseSingleton().get_db()
        result = db.execute_query(query, (status,), fetch=True)
        return [OrderFactory.create_from_db_row(data) for data in result]

    @classmethod
    def get_all(cls):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Factory"""
        query = "SELECT * FROM order_table ORDER BY id"
        db = DatabaseSingleton().get_db()
        result = db.execute_query(query, fetch=True)
        return [OrderFactory.create_from_db_row(data) for data in result]

    def get_client(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–∫–∞–∑–∞"""
        return Client.get_by_id(self.client_id) if self.client_id else None

    def get_order_items(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–∞"""
        return OrderItem.get_by_order_id(self.id) if self.id else []

    def get_work_order(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
        return WorkOrder.get_by_order_id(self.id) if self.id else None

    @classmethod
    def create_factory(cls):
        """–§–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        return OrderFactory()

    def __str__(self):
        return f"Order(id={self.id}, client_id={self.client_id}, status={self.status}, date={self.data})"

    def __repr__(self):
        return self.__str__()


class OrderItem(BaseModel):
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã OrderItem"""

    def __init__(self, order_id=None, product_id=None, inform=None, id=None):
        super().__init__()
        self.id = id
        self.order_id = order_id
        self.product_id = product_id
        self.inform = inform

    def save(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        if self.id:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
            query = """
            UPDATE order_item 
            SET order_id = %s, product_id = %s, inform = %s
            WHERE id = %s
            """
            params = (self.order_id, self.product_id, self.inform, self.id)
            result = self.db.execute_query(query, params)
            return result is not False
        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
            query = """
            INSERT INTO order_item (order_id, product_id, inform) 
            VALUES (%s, %s, %s) RETURNING id
            """
            params = (self.order_id, self.product_id, self.inform)
            result = self.db.execute_query(query, params, fetch=True)
            if result:
                self.id = result[0]['id']
                return True
            return False

    @classmethod
    def get_by_order_id(cls, order_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–∞ –ø–æ ID –∑–∞–∫–∞–∑–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Factory"""
        query = "SELECT * FROM order_item WHERE order_id = %s"
        db = DatabaseSingleton().get_db()
        result = db.execute_query(query, (order_id,), fetch=True)
        return [OrderItemFactory.create_from_db_row(data) for data in result]

    def get_order(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        return Order.get_by_id(self.order_id) if self.order_id else None

    def get_product(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        return Product.get_by_id(self.product_id) if self.product_id else None

    @classmethod
    def create_factory(cls):
        """–§–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞"""
        return OrderItemFactory()

    def __str__(self):
        return f"OrderItem(id={self.id}, order_id={self.order_id}, product_id={self.product_id}, info={self.inform})"

    def __repr__(self):
        return self.__str__()


class WorkOrder(BaseModel):
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã WorkOrder"""

    def __init__(self, order_id=None, master_id=None, data=None, id=None):
        super().__init__()
        self.id = id
        self.order_id = order_id
        self.master_id = master_id
        self.data = data or datetime.now().date()

    def save(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        if self.id:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
            query = """
            UPDATE work_order 
            SET order_id = %s, master_id = %s, data = %s
            WHERE id = %s
            """
            params = (self.order_id, self.master_id, self.data, self.id)
            result = self.db.execute_query(query, params)
            return result is not False
        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
            query = """
            INSERT INTO work_order (order_id, master_id, data) 
            VALUES (%s, %s, %s) RETURNING id
            """
            params = (self.order_id, self.master_id, self.data)
            result = self.db.execute_query(query, params, fetch=True)
            if result:
                self.id = result[0]['id']
                return True
            return False

    @classmethod
    def get_by_order_id(cls, order_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø–æ ID –∑–∞–∫–∞–∑–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Factory"""
        query = "SELECT * FROM work_order WHERE order_id = %s"
        db = DatabaseSingleton().get_db()
        result = db.execute_query(query, (order_id,), fetch=True)
        if result:
            return WorkOrderFactory.create_from_db_row(result[0])
        return None

    @classmethod
    def get_by_master_id(cls, master_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ ID –º–∞—Å—Ç–µ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Factory"""
        query = "SELECT * FROM work_order WHERE master_id = %s"
        db = DatabaseSingleton().get_db()
        result = db.execute_query(query, (master_id,), fetch=True)
        return [WorkOrderFactory.create_from_db_row(data) for data in result]

    def get_order(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        return Order.get_by_id(self.order_id) if self.order_id else None

    def get_master(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞"""
        return Master.get_by_id(self.master_id) if self.master_id else None

    @classmethod
    def create_factory(cls):
        """–§–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
        return WorkOrderFactory()

    def __str__(self):
        return f"WorkOrder(id={self.id}, order_id={self.order_id}, master_id={self.master_id}, date={self.data})"

    def __repr__(self):
        return self.__str__()


# ==============================
# –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –°–ò–°–¢–ï–ú–´
# ==============================
class JewelrySystem:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Å–∏—Å—Ç–µ–º—ã —é–≤–µ–ª–∏—Ä–Ω–æ–π –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π"""

    def __init__(self):
        self.db = DatabaseSingleton().get_db()
        self.order_facade = None
        self.notification_service = NotificationService()
        self.init_database()

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å Database"""
        if not self.db.create_tables():
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü")
            return False

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞—Å–∞–¥ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        self.order_facade = OrderManagementFacade(self)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –ø—É—Å—Ç—ã–µ
        if not Master.get_all():
            self.add_sample_data()

        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True

    def add_sample_data(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Å—Ç–µ—Ä–æ–≤
        master_factory = MasterFactory()
        masters_data = [
            {"name": "–ò–≤–∞–Ω", "surname": "–ü–µ—Ç—Ä–æ–≤", "patronymic": "–°–µ—Ä–≥–µ–µ–≤–∏—á",
             "phone_number": "+79161111111", "email": "master1@almaz.ru"},
            {"name": "–ú–∞—Ä–∏—è", "surname": "–°–∏–¥–æ—Ä–æ–≤–∞", "patronymic": "–ò–≤–∞–Ω–æ–≤na",
             "phone_number": "+79162222222", "email": "master2@almaz.ru"},
            {"name": "–ê–ª–µ–∫—Å–µ–π", "surname": "–ö–æ–∑–ª–æ–≤", "patronymic": "–ü–µ—Ç—Ä–æ–≤–∏—á",
             "phone_number": "+79163333333", "email": "master3@almaz.ru"}
        ]

        for master_data in masters_data:
            master = master_factory.create_model(**master_data)
            master.save()

        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")

    def create_complex_order(self, client_data, products_data, assign_master=True, master_id=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—è"""
        try:
            builder = OrderBuilder()

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            builder.set_client(**client_data)

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
            for product in products_data:
                builder.add_product(**product)

            # –ù–∞–∑–Ω–∞—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if assign_master:
                if master_id:
                    builder.assign_master(master_id=master_id)
                else:
                    builder.assign_master()

            # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–∫–∞–∑
            result = builder.build()

            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–ª–æ–∂–Ω—ã–π –∑–∞–∫–∞–∑ ID: {result['order'].id}")
            return result

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            return None

    def get_order_builder(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—è –∑–∞–∫–∞–∑–æ–≤"""
        return OrderBuilder()

    def display_system_status(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        print("\n" + "=" * 50)
        print("–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ –Æ–í–ï–õ–ò–†–ù–û–ô –ú–ê–°–¢–ï–†–°–ö–û–ô")
        print("=" * 50)

        # –ö–ª–∏–µ–Ω—Ç—ã
        clients = Client.get_all()
        print(f"üë• –ö–ª–∏–µ–Ω—Ç—ã: {len(clients)}")

        # –ú–∞—Å—Ç–µ—Ä–∞
        masters = Master.get_all()
        available_masters = Master.get_available_masters()
        print(f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä–∞: {len(masters)} (—Å–≤–æ–±–æ–¥–Ω—ã—Ö: {len(available_masters)})")

        # –ü—Ä–æ–¥—É–∫—Ç—ã
        products = Product.get_all()
        print(f"üíé –ü—Ä–æ–¥—É–∫—Ç—ã: {len(products)}")

        # –ó–∞–∫–∞–∑—ã
        orders = Order.get_all()
        new_orders = Order.get_by_status('new')
        print(f"üì¶ –ó–∞–∫–∞–∑—ã: {len(orders)} (–Ω–æ–≤—ã—Ö: {len(new_orders)})")

        print("=" * 50)

    # ==================================================================
    # –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–û–ë–ê–í–õ–ï–ù–ù–´–ú–ò –°–¢–†–£–ö–¢–£–†–ù–´–ú–ò –ü–ê–¢–¢–ï–†–ù–ê–ú–ò
    # ==================================================================

    def get_order_facade(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞—Å–∞–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏"""
        return self.order_facade

    def get_notification_service(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        return self.notification_service

    def create_order_with_notifications(self, client_data, products_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        print(f"\nüéØ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –¥–ª—è {client_data['name']}")

        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ —Ñ–∞—Å–∞–¥
            order_result = self.order_facade.create_simple_order(
                client_name=client_data['name'],
                client_surname=client_data['surname'],
                client_phone=client_data['phone_number'],
                product_type=products_data[0]['product_type'],
                material=products_data[0]['material'],
                sample=products_data[0]['sample']
            )

            if order_result:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                order = order_result['order']
                client = order_result['client']

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
                self.notification_service.send_order_created_notification(order, client)

                # –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞—Å—Ç–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
                work_order = order_result.get('work_order')
                if work_order:
                    master = work_order.get_master()
                    if master:
                        self.notification_service.send_master_assigned_notification(order, master, client)

                return order_result

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏: {e}")
            return None

    def demonstrate_enhanced_order(self, base_order, enhancements):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∑–∞–∫–∞–∑–æ–º —á–µ—Ä–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã"""
        print(f"\nüéÅ –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —É—Å–ª—É–≥–∞–º–∏")

        enhanced_order = OrderEnhancementService.create_enhanced_order(
            base_order, enhancements
        )

        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {enhanced_order.get_description()}")
        print(f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {enhanced_order.get_total_cost()} —Ä—É–±.")
        print(f"üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {enhanced_order.get_additional_info()}")

        return enhanced_order

    def send_custom_notification(self, recipient, message, channels=None, subject=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        return self.notification_service.send_notification(
            recipient=recipient,
            message=message,
            channels=channels,
            subject=subject
        )

    def get_system_statistics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        print("\nüìä –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´")
        print("-" * 40)

        stats = {}

        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats['total_clients'] = len(Client.get_all())
        stats['total_masters'] = len(Master.get_all())
        stats['total_products'] = len(Product.get_all())
        stats['total_orders'] = len(Order.get_all())

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞–∫–∞–∑–æ–≤
        stats['new_orders'] = len(Order.get_by_status('new'))
        stats['in_progress_orders'] = len(Order.get_by_status('in_progress'))
        stats['completed_orders'] = len(Order.get_by_status('completed'))

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º
        available_masters = Master.get_available_masters()
        busy_masters = [m for m in Master.get_all() if not m.is_available]
        stats['available_masters'] = len(available_masters)
        stats['busy_masters'] = len(busy_masters)

        # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        for key, value in stats.items():
            readable_key = key.replace('_', ' ').title()
            print(f"‚Ä¢ {readable_key}: {value}")

        return stats

